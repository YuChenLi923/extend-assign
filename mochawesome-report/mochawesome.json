{
  "stats": {
    "suites": 3,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2017-12-04T08:55:00.528Z",
    "end": "2017-12-04T08:55:00.571Z",
    "duration": 43,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "test assign",
        "suites": [],
        "tests": [
          {
            "title": "copy",
            "fullTitle": "test assign copy",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = assign({c: 3}, {\n  a: 1,\n  b: 2\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  c: 3\n})",
            "err": {},
            "isRoot": false,
            "uuid": "706fa082-564b-4441-b825-0e07e9cbb637",
            "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "deep copy",
            "fullTitle": "test assign deep copy",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = assign({a: {c: 3}}, {\n  a: {\n    a: 1,\n    b: 2\n  }\n}, true);\nassert.deepEqual(result, {\n  a: {\n    a: 1,\n    b: 2,\n    c: 3\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d54cabd4-ff96-4a43-a2d6-af49a9e3cd0f",
            "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "copy array",
            "fullTitle": "test assign copy array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var a = {\n  persons: [{\n    a: 2\n  }, 2, 3]\n};\nvar b = {\n  persons: [{\n    b: 4\n  }, 5]\n};\nassert.deepEqual(assign(a, b, true), { persons: [{a: 2, b: 4}, 5, 3] });",
            "err": {},
            "isRoot": false,
            "uuid": "410d11cd-20c5-43fe-ace7-2b364d8e1452",
            "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1512377688147\\bundle.js",
        "uuid": "c65f8c3a-8330-4e41-b135-a7b192343111",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\extend-assign\\.tmp\\mocha-webpack\\1512377688147\\bundle.js",
        "passes": [
          {
            "title": "copy",
            "fullTitle": "test assign copy",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = assign({c: 3}, {\n  a: 1,\n  b: 2\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  c: 3\n})",
            "err": {},
            "isRoot": false,
            "uuid": "706fa082-564b-4441-b825-0e07e9cbb637",
            "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "deep copy",
            "fullTitle": "test assign deep copy",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = assign({a: {c: 3}}, {\n  a: {\n    a: 1,\n    b: 2\n  }\n}, true);\nassert.deepEqual(result, {\n  a: {\n    a: 1,\n    b: 2,\n    c: 3\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d54cabd4-ff96-4a43-a2d6-af49a9e3cd0f",
            "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "copy array",
            "fullTitle": "test assign copy array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var a = {\n  persons: [{\n    a: 2\n  }, 2, 3]\n};\nvar b = {\n  persons: [{\n    b: 4\n  }, 5]\n};\nassert.deepEqual(assign(a, b, true), { persons: [{a: 2, b: 4}, 5, 3] });",
            "err": {},
            "isRoot": false,
            "uuid": "410d11cd-20c5-43fe-ace7-2b364d8e1452",
            "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      },
      {
        "title": "test filter",
        "suites": [],
        "tests": [
          {
            "title": "filter",
            "fullTitle": "test filter filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['s']\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  t: 5,\n  m: {\n    t:2\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c581b4b2-1e0a-404a-8954-f371c754335e",
            "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "filter global",
            "fullTitle": "test filter filter global",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['t'],\n  filterGlobal: true\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  s: 2,\n  m: {}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "815b4815-cfd0-4cb3-ae01-e0ad6c23c72d",
            "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "deep filter",
            "fullTitle": "test filter deep filter",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['m.t']\n});\nassert.deepEqual(result, {\n  s: 2,\n  a: 1,\n  b: 2,\n  t: 5,\n  m: {\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e4d4fcf6-ce53-415f-a5c4-8d911ed8aefc",
            "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "custom filter",
            "fullTitle": "test filter custom filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n  b: 1,\n  c: 2\n};\nconst b = {\n  a: 5,\n  b: 8\n};\nconst result = assign(a, b, true, {\n  filter: (key) => {\n    return key !== 'b';\n  }\n});\nassert.deepEqual(result, {\n  a: 5,\n  c: 2,\n  b: 1\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6c918af7-eb49-46a9-90cb-57a7261a45af",
            "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1512377688147\\bundle.js",
        "uuid": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\extend-assign\\.tmp\\mocha-webpack\\1512377688147\\bundle.js",
        "passes": [
          {
            "title": "filter",
            "fullTitle": "test filter filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['s']\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  t: 5,\n  m: {\n    t:2\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c581b4b2-1e0a-404a-8954-f371c754335e",
            "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "filter global",
            "fullTitle": "test filter filter global",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['t'],\n  filterGlobal: true\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  s: 2,\n  m: {}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "815b4815-cfd0-4cb3-ae01-e0ad6c23c72d",
            "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "deep filter",
            "fullTitle": "test filter deep filter",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['m.t']\n});\nassert.deepEqual(result, {\n  s: 2,\n  a: 1,\n  b: 2,\n  t: 5,\n  m: {\n  }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e4d4fcf6-ce53-415f-a5c4-8d911ed8aefc",
            "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "custom filter",
            "fullTitle": "test filter custom filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n  b: 1,\n  c: 2\n};\nconst b = {\n  a: 5,\n  b: 8\n};\nconst result = assign(a, b, true, {\n  filter: (key) => {\n    return key !== 'b';\n  }\n});\nassert.deepEqual(result, {\n  a: 5,\n  c: 2,\n  b: 1\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6c918af7-eb49-46a9-90cb-57a7261a45af",
            "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      },
      {
        "title": "test protect",
        "suites": [],
        "tests": [
          {
            "title": "protect property",
            "fullTitle": "test protect protect property",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function Person(name) {\n    assign(this, {\n        name\n    },true, {\n        protect: ['name']\n    });\n}\nlet A = new Person('A');\nA.name = 1;\nassert.equal(A.name, 'A');",
            "err": {},
            "isRoot": false,
            "uuid": "dbf9469e-0160-41a6-b604-c13aa3bacd8a",
            "parentUUID": "0d40e7a1-620d-4786-b4e0-d0b58e36e274",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1512377688147\\bundle.js",
        "uuid": "0d40e7a1-620d-4786-b4e0-d0b58e36e274",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\extend-assign\\.tmp\\mocha-webpack\\1512377688147\\bundle.js",
        "passes": [
          {
            "title": "protect property",
            "fullTitle": "test protect protect property",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function Person(name) {\n    assign(this, {\n        name\n    },true, {\n        protect: ['name']\n    });\n}\nlet A = new Person('A');\nA.name = 1;\nassert.equal(A.name, 'A');",
            "err": {},
            "isRoot": false,
            "uuid": "dbf9469e-0160-41a6-b604-c13aa3bacd8a",
            "parentUUID": "0d40e7a1-620d-4786-b4e0-d0b58e36e274",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "7416b19a-13fd-4283-97be-fdd3f25c327e",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "copy",
      "fullTitle": "test assign copy",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = assign({c: 3}, {\n  a: 1,\n  b: 2\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  c: 3\n})",
      "err": {},
      "isRoot": false,
      "uuid": "706fa082-564b-4441-b825-0e07e9cbb637",
      "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "deep copy",
      "fullTitle": "test assign deep copy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = assign({a: {c: 3}}, {\n  a: {\n    a: 1,\n    b: 2\n  }\n}, true);\nassert.deepEqual(result, {\n  a: {\n    a: 1,\n    b: 2,\n    c: 3\n  }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d54cabd4-ff96-4a43-a2d6-af49a9e3cd0f",
      "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "copy array",
      "fullTitle": "test assign copy array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var a = {\n  persons: [{\n    a: 2\n  }, 2, 3]\n};\nvar b = {\n  persons: [{\n    b: 4\n  }, 5]\n};\nassert.deepEqual(assign(a, b, true), { persons: [{a: 2, b: 4}, 5, 3] });",
      "err": {},
      "isRoot": false,
      "uuid": "410d11cd-20c5-43fe-ace7-2b364d8e1452",
      "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter",
      "fullTitle": "test filter filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['s']\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  t: 5,\n  m: {\n    t:2\n  }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c581b4b2-1e0a-404a-8954-f371c754335e",
      "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter global",
      "fullTitle": "test filter filter global",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['t'],\n  filterGlobal: true\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  s: 2,\n  m: {}\n});",
      "err": {},
      "isRoot": false,
      "uuid": "815b4815-cfd0-4cb3-ae01-e0ad6c23c72d",
      "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "deep filter",
      "fullTitle": "test filter deep filter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['m.t']\n});\nassert.deepEqual(result, {\n  s: 2,\n  a: 1,\n  b: 2,\n  t: 5,\n  m: {\n  }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e4d4fcf6-ce53-415f-a5c4-8d911ed8aefc",
      "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "custom filter",
      "fullTitle": "test filter custom filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n  b: 1,\n  c: 2\n};\nconst b = {\n  a: 5,\n  b: 8\n};\nconst result = assign(a, b, true, {\n  filter: (key) => {\n    return key !== 'b';\n  }\n});\nassert.deepEqual(result, {\n  a: 5,\n  c: 2,\n  b: 1\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6c918af7-eb49-46a9-90cb-57a7261a45af",
      "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "protect property",
      "fullTitle": "test protect protect property",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function Person(name) {\n    assign(this, {\n        name\n    },true, {\n        protect: ['name']\n    });\n}\nlet A = new Person('A');\nA.name = 1;\nassert.equal(A.name, 'A');",
      "err": {},
      "isRoot": false,
      "uuid": "dbf9469e-0160-41a6-b604-c13aa3bacd8a",
      "parentUUID": "0d40e7a1-620d-4786-b4e0-d0b58e36e274",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "copy",
      "fullTitle": "test assign copy",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = assign({c: 3}, {\n  a: 1,\n  b: 2\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  c: 3\n})",
      "err": {},
      "isRoot": false,
      "uuid": "706fa082-564b-4441-b825-0e07e9cbb637",
      "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "deep copy",
      "fullTitle": "test assign deep copy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = assign({a: {c: 3}}, {\n  a: {\n    a: 1,\n    b: 2\n  }\n}, true);\nassert.deepEqual(result, {\n  a: {\n    a: 1,\n    b: 2,\n    c: 3\n  }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d54cabd4-ff96-4a43-a2d6-af49a9e3cd0f",
      "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "copy array",
      "fullTitle": "test assign copy array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var a = {\n  persons: [{\n    a: 2\n  }, 2, 3]\n};\nvar b = {\n  persons: [{\n    b: 4\n  }, 5]\n};\nassert.deepEqual(assign(a, b, true), { persons: [{a: 2, b: 4}, 5, 3] });",
      "err": {},
      "isRoot": false,
      "uuid": "410d11cd-20c5-43fe-ace7-2b364d8e1452",
      "parentUUID": "c65f8c3a-8330-4e41-b135-a7b192343111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter",
      "fullTitle": "test filter filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['s']\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  t: 5,\n  m: {\n    t:2\n  }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c581b4b2-1e0a-404a-8954-f371c754335e",
      "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter global",
      "fullTitle": "test filter filter global",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['t'],\n  filterGlobal: true\n});\nassert.deepEqual(result, {\n  a: 1,\n  b: 2,\n  s: 2,\n  m: {}\n});",
      "err": {},
      "isRoot": false,
      "uuid": "815b4815-cfd0-4cb3-ae01-e0ad6c23c72d",
      "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "deep filter",
      "fullTitle": "test filter deep filter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n  a: 1,\n  b: 2\n};\nconst b = {\n  s: 2,\n  t: 5,\n  m: {\n    t: 2\n  }\n};\nconst result = assign(a, b, true, {\n  filter: ['m.t']\n});\nassert.deepEqual(result, {\n  s: 2,\n  a: 1,\n  b: 2,\n  t: 5,\n  m: {\n  }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e4d4fcf6-ce53-415f-a5c4-8d911ed8aefc",
      "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "custom filter",
      "fullTitle": "test filter custom filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n  b: 1,\n  c: 2\n};\nconst b = {\n  a: 5,\n  b: 8\n};\nconst result = assign(a, b, true, {\n  filter: (key) => {\n    return key !== 'b';\n  }\n});\nassert.deepEqual(result, {\n  a: 5,\n  c: 2,\n  b: 1\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6c918af7-eb49-46a9-90cb-57a7261a45af",
      "parentUUID": "7b3f2484-dcf4-4222-b82b-316c71f41c13",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "protect property",
      "fullTitle": "test protect protect property",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function Person(name) {\n    assign(this, {\n        name\n    },true, {\n        protect: ['name']\n    });\n}\nlet A = new Person('A');\nA.name = 1;\nassert.equal(A.name, 'A');",
      "err": {},
      "isRoot": false,
      "uuid": "dbf9469e-0160-41a6-b604-c13aa3bacd8a",
      "parentUUID": "0d40e7a1-620d-4786-b4e0-d0b58e36e274",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}