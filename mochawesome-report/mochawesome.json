{
  "stats": {
    "suites": 3,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2017-11-26T09:48:36.591Z",
    "end": "2017-11-26T09:48:36.655Z",
    "duration": 64,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "test assign",
        "suites": [],
        "tests": [
          {
            "title": "copy",
            "fullTitle": "test assign copy",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = assign({c: 3}, {\n    a: 1,\n    b: 2\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    c: 3\n})",
            "err": {},
            "isRoot": false,
            "uuid": "b2bac202-d0f3-44cb-8bc5-b45908b4bc33",
            "parentUUID": "33f7d7a9-f5da-4752-8d11-27caa46de10f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "deep copy",
            "fullTitle": "test assign deep copy",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = assign({a: { c: 3}}, {\n    a: {\n        a: 1,\n        b: 2\n    }\n}, true);\nassert.deepEqual(result, {\n    a: {\n        a: 1,\n        b: 2,\n        c: 3\n    }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "c51a8823-a793-4d12-9e23-6eeb156cf95a",
            "parentUUID": "33f7d7a9-f5da-4752-8d11-27caa46de10f",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1511689715861\\bundle.js",
        "uuid": "33f7d7a9-f5da-4752-8d11-27caa46de10f",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\extend-assign\\.tmp\\mocha-webpack\\1511689715861\\bundle.js",
        "passes": [
          {
            "title": "copy",
            "fullTitle": "test assign copy",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = assign({c: 3}, {\n    a: 1,\n    b: 2\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    c: 3\n})",
            "err": {},
            "isRoot": false,
            "uuid": "b2bac202-d0f3-44cb-8bc5-b45908b4bc33",
            "parentUUID": "33f7d7a9-f5da-4752-8d11-27caa46de10f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "deep copy",
            "fullTitle": "test assign deep copy",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = assign({a: { c: 3}}, {\n    a: {\n        a: 1,\n        b: 2\n    }\n}, true);\nassert.deepEqual(result, {\n    a: {\n        a: 1,\n        b: 2,\n        c: 3\n    }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "c51a8823-a793-4d12-9e23-6eeb156cf95a",
            "parentUUID": "33f7d7a9-f5da-4752-8d11-27caa46de10f",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2,
        "rootEmpty": false
      },
      {
        "title": "test filter",
        "suites": [],
        "tests": [
          {
            "title": "filter",
            "fullTitle": "test filter filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['s']\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7875cea6-fb7d-45cc-a933-232d5bc9355d",
            "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "filter global",
            "fullTitle": "test filter filter global",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['t'],\n    filterGlobal: true\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    s: 2,\n    m: {}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "59d1152b-fd72-476d-be6c-807b16c4c991",
            "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "deep filter",
            "fullTitle": "test filter deep filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['m.t']\n});\nassert.deepEqual(result, {\n    s: 2,\n    a: 1,\n    b: 2,\n    t: 5,\n    m: {\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "41277d58-f49d-4779-9659-7a952970a6f2",
            "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "custom filter",
            "fullTitle": "test filter custom filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n    b: 1,\n    c: 2\n};\nconst b = {\n    a: 5,\n    b: 8\n};\nconst result = assign(a, b, true, {\n    filter: (key) => {\n        return key !== 'b'\n    }\n});\nassert.deepEqual(result, {\n    a: 5,\n    c: 2,\n    b: 1\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1fbf4095-23f3-43a3-9437-d8ea950d24a7",
            "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1511689715861\\bundle.js",
        "uuid": "92deedd0-b068-4974-88db-f8a28a589b27",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\extend-assign\\.tmp\\mocha-webpack\\1511689715861\\bundle.js",
        "passes": [
          {
            "title": "filter",
            "fullTitle": "test filter filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['s']\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7875cea6-fb7d-45cc-a933-232d5bc9355d",
            "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "filter global",
            "fullTitle": "test filter filter global",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['t'],\n    filterGlobal: true\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    s: 2,\n    m: {}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "59d1152b-fd72-476d-be6c-807b16c4c991",
            "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "deep filter",
            "fullTitle": "test filter deep filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['m.t']\n});\nassert.deepEqual(result, {\n    s: 2,\n    a: 1,\n    b: 2,\n    t: 5,\n    m: {\n    }\n});",
            "err": {},
            "isRoot": false,
            "uuid": "41277d58-f49d-4779-9659-7a952970a6f2",
            "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "custom filter",
            "fullTitle": "test filter custom filter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const a = {\n    b: 1,\n    c: 2\n};\nconst b = {\n    a: 5,\n    b: 8\n};\nconst result = assign(a, b, true, {\n    filter: (key) => {\n        return key !== 'b'\n    }\n});\nassert.deepEqual(result, {\n    a: 5,\n    c: 2,\n    b: 1\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1fbf4095-23f3-43a3-9437-d8ea950d24a7",
            "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "test protect",
        "suites": [],
        "tests": [
          {
            "title": "protect property",
            "fullTitle": "test protect protect property",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function Person(name) {\n    assign(this, {\n        name\n    },true, {\n        protect: ['name']\n    });\n}\nlet A = new Person('A');\nA.name = 1;\nassert.equal(A.name, 'A');",
            "err": {},
            "isRoot": false,
            "uuid": "3397a1f1-fdcf-4840-ab4f-5a7341894b5a",
            "parentUUID": "5c8e21ae-2bdc-4fc8-81d5-408e995a587d",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\.tmp\\mocha-webpack\\1511689715861\\bundle.js",
        "uuid": "5c8e21ae-2bdc-4fc8-81d5-408e995a587d",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\技术学习与研究\\github\\extend-assign\\.tmp\\mocha-webpack\\1511689715861\\bundle.js",
        "passes": [
          {
            "title": "protect property",
            "fullTitle": "test protect protect property",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function Person(name) {\n    assign(this, {\n        name\n    },true, {\n        protect: ['name']\n    });\n}\nlet A = new Person('A');\nA.name = 1;\nassert.equal(A.name, 'A');",
            "err": {},
            "isRoot": false,
            "uuid": "3397a1f1-fdcf-4840-ab4f-5a7341894b5a",
            "parentUUID": "5c8e21ae-2bdc-4fc8-81d5-408e995a587d",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "02848400-d791-4f98-938e-1b0ba91ad3ad",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "copy",
      "fullTitle": "test assign copy",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = assign({c: 3}, {\n    a: 1,\n    b: 2\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    c: 3\n})",
      "err": {},
      "isRoot": false,
      "uuid": "b2bac202-d0f3-44cb-8bc5-b45908b4bc33",
      "parentUUID": "33f7d7a9-f5da-4752-8d11-27caa46de10f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "deep copy",
      "fullTitle": "test assign deep copy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = assign({a: { c: 3}}, {\n    a: {\n        a: 1,\n        b: 2\n    }\n}, true);\nassert.deepEqual(result, {\n    a: {\n        a: 1,\n        b: 2,\n        c: 3\n    }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "c51a8823-a793-4d12-9e23-6eeb156cf95a",
      "parentUUID": "33f7d7a9-f5da-4752-8d11-27caa46de10f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter",
      "fullTitle": "test filter filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['s']\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7875cea6-fb7d-45cc-a933-232d5bc9355d",
      "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter global",
      "fullTitle": "test filter filter global",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['t'],\n    filterGlobal: true\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    s: 2,\n    m: {}\n});",
      "err": {},
      "isRoot": false,
      "uuid": "59d1152b-fd72-476d-be6c-807b16c4c991",
      "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "deep filter",
      "fullTitle": "test filter deep filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['m.t']\n});\nassert.deepEqual(result, {\n    s: 2,\n    a: 1,\n    b: 2,\n    t: 5,\n    m: {\n    }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "41277d58-f49d-4779-9659-7a952970a6f2",
      "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "custom filter",
      "fullTitle": "test filter custom filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n    b: 1,\n    c: 2\n};\nconst b = {\n    a: 5,\n    b: 8\n};\nconst result = assign(a, b, true, {\n    filter: (key) => {\n        return key !== 'b'\n    }\n});\nassert.deepEqual(result, {\n    a: 5,\n    c: 2,\n    b: 1\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1fbf4095-23f3-43a3-9437-d8ea950d24a7",
      "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "protect property",
      "fullTitle": "test protect protect property",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function Person(name) {\n    assign(this, {\n        name\n    },true, {\n        protect: ['name']\n    });\n}\nlet A = new Person('A');\nA.name = 1;\nassert.equal(A.name, 'A');",
      "err": {},
      "isRoot": false,
      "uuid": "3397a1f1-fdcf-4840-ab4f-5a7341894b5a",
      "parentUUID": "5c8e21ae-2bdc-4fc8-81d5-408e995a587d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "copy",
      "fullTitle": "test assign copy",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = assign({c: 3}, {\n    a: 1,\n    b: 2\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    c: 3\n})",
      "err": {},
      "isRoot": false,
      "uuid": "b2bac202-d0f3-44cb-8bc5-b45908b4bc33",
      "parentUUID": "33f7d7a9-f5da-4752-8d11-27caa46de10f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "deep copy",
      "fullTitle": "test assign deep copy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = assign({a: { c: 3}}, {\n    a: {\n        a: 1,\n        b: 2\n    }\n}, true);\nassert.deepEqual(result, {\n    a: {\n        a: 1,\n        b: 2,\n        c: 3\n    }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "c51a8823-a793-4d12-9e23-6eeb156cf95a",
      "parentUUID": "33f7d7a9-f5da-4752-8d11-27caa46de10f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter",
      "fullTitle": "test filter filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['s']\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7875cea6-fb7d-45cc-a933-232d5bc9355d",
      "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "filter global",
      "fullTitle": "test filter filter global",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['t'],\n    filterGlobal: true\n});\nassert.deepEqual(result, {\n    a: 1,\n    b: 2,\n    s: 2,\n    m: {}\n});",
      "err": {},
      "isRoot": false,
      "uuid": "59d1152b-fd72-476d-be6c-807b16c4c991",
      "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "deep filter",
      "fullTitle": "test filter deep filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n    a: 1,\n    b: 2\n};\nconst b = {\n    s: 2,\n    t: 5,\n    m: {\n        t:2\n    }\n};\nconst result = assign(a, b, true, {\n    filter: ['m.t']\n});\nassert.deepEqual(result, {\n    s: 2,\n    a: 1,\n    b: 2,\n    t: 5,\n    m: {\n    }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "41277d58-f49d-4779-9659-7a952970a6f2",
      "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "custom filter",
      "fullTitle": "test filter custom filter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const a = {\n    b: 1,\n    c: 2\n};\nconst b = {\n    a: 5,\n    b: 8\n};\nconst result = assign(a, b, true, {\n    filter: (key) => {\n        return key !== 'b'\n    }\n});\nassert.deepEqual(result, {\n    a: 5,\n    c: 2,\n    b: 1\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1fbf4095-23f3-43a3-9437-d8ea950d24a7",
      "parentUUID": "92deedd0-b068-4974-88db-f8a28a589b27",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "protect property",
      "fullTitle": "test protect protect property",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function Person(name) {\n    assign(this, {\n        name\n    },true, {\n        protect: ['name']\n    });\n}\nlet A = new Person('A');\nA.name = 1;\nassert.equal(A.name, 'A');",
      "err": {},
      "isRoot": false,
      "uuid": "3397a1f1-fdcf-4840-ab4f-5a7341894b5a",
      "parentUUID": "5c8e21ae-2bdc-4fc8-81d5-408e995a587d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}